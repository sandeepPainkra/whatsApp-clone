{"version":3,"sources":["features/roomSlice.js","components/firebase.js","features/userSlice.js","components/Chat.js","components/Login.js","components/SidebarChat.js","components/Sidebar.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["roomSlice","createSlice","name","initialState","roomName","roomId","reducers","setRoomDetails","state","action","payload","actions","selectRoomName","room","selectRoomId","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","userSlice","user","LogIn","LogOut","selectUser","Chat","useState","message","setMessage","useSelector","input","setInput","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","console","log","className","Avatar","Date","timestamp","toDate","toUTCString","Search","MoreHoriz","email","fontSize","type","value","onChange","event","target","placeholder","IconButton","disabled","onClick","e","preventDefault","add","displayName","FieldValue","serverTimestamp","photoURL","Send","variant","color","Mic","Login","src","alt","Button","signInWithPopup","catch","error","alert","SidebarChat","addNewChat","id","content","dispatch","useDispatch","chatName","prompt","Sidebar","Room","setRoom","App","onAuthStateChanged","authUser","store","configureStore","reducer","userReducer","roomReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1817e6dd.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const roomSlice = createSlice({\n   name: \"room\",\n   initialState: {\n      roomName: null,\n      roomId: null,\n   },\n   reducers: {\n      setRoomDetails: (state, action) => {\n         state.roomName = action.payload.roomName;\n         state.roomId = action.payload.roomId;\n      },\n   },\n});\n\nexport const { setRoomDetails } = roomSlice.actions;\n\nexport const selectRoomName = (state) => state.room.roomName;\nexport const selectRoomId = (state) => state.room.roomId;\n\nexport default roomSlice.reducer;\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n   apiKey: \"AIzaSyACW3RhQQOK9ipQ_MRkZwnu82C-W3quFS0\",\r\n   authDomain: \"whatsapp-clone-89b3f.firebaseapp.com\",\r\n   projectId: \"whatsapp-clone-89b3f\",\r\n   storageBucket: \"whatsapp-clone-89b3f.appspot.com\",\r\n   messagingSenderId: \"607745014138\",\r\n   appId: \"1:607745014138:web:87de059387bc1341b83ec3\",\r\n   measurementId: \"G-PPFBED9F0F\",\r\n};\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nexport default db;\r\nexport { auth, provider };\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\n\nexport const userSlice = createSlice({\n   name: \"user\",\n   initialState: {\n      user:[],\n   },\n   reducers: {\n      LogIn: (state, action) => {\n         state.user = action.payload;\n      },\n      LogOut: (state) => {\n         state.user = null;\n      },\n   },\n});\n\nexport const { LogIn, LogOut } = userSlice.actions;\n\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport { Mic, MoreHoriz, Search, Send } from \"@material-ui/icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Chat.css\";\r\nimport EmojiEmotionsIcon from \"@material-ui/icons/EmojiEmotions\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { selectRoomId, selectRoomName } from \"../features/roomSlice\";\r\nimport firebase from \"firebase\";\r\nimport db from \"./firebase\";\r\nimport userEvent from \"@testing-library/user-event\";\r\nimport { selectUser } from \"../features/userSlice\";\r\n\r\nconst Chat = () => {\r\n   const [message, setMessage] = useState([]);\r\n   const roomName = useSelector(selectRoomName);\r\n   const roomId = useSelector(selectRoomId);\r\n   const [input, setInput] = useState(\"\");\r\n   const user = useSelector(selectUser);\r\n\r\n   useEffect(() => {\r\n      if (roomId) {\r\n         db.collection(\"rooms\")\r\n            .doc(roomId)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"desc\")\r\n            .onSnapshot((snapshot) => {\r\n               setMessage(snapshot.docs.map((doc) => doc.data()));\r\n            });\r\n      }\r\n   }, [roomId]);\r\n   console.log(message);\r\n   const SendMessage = (e) => {\r\n      e.preventDefault();\r\n      if (roomId) {\r\n         db.collection(\"rooms\").doc(roomId).collection(\"messages\").add({\r\n            message: input,\r\n            displayName: user.displayName,\r\n            timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n            email: user.email,\r\n            photoURL: user.photoURL,\r\n         });\r\n      }\r\n\r\n      setInput(\"\");\r\n   };\r\n   return (\r\n      <>\r\n         <div className=\"chat\">\r\n            <div className=\"chat_header\">\r\n               <div className=\"chat_headerLeft\">\r\n                  <Avatar />\r\n                  <div className=\"chat_headerLeftInfo\">\r\n                     <h2>{roomName}</h2>\r\n                     <p>\r\n                        {new Date(\r\n                           message[0]?.timestamp?.toDate()\r\n                        ).toUTCString()}\r\n                     </p>\r\n                  </div>\r\n               </div>\r\n               <div className=\"chat_headerRight\">\r\n                  <Search />\r\n                  <MoreHoriz />\r\n               </div>\r\n            </div>\r\n            <div className=\"chat_body\">\r\n               {message.map((message) => {\r\n                  console.log(message);\r\n                  return (\r\n                     <p\r\n                        className={`chat_message ${\r\n                           user?.email === message.email && \"message_reciever\"\r\n                        } `}\r\n                     >\r\n                        {message.message}\r\n                        <small>\r\n                           {new Date(message.timestamp?.toDate()).toUTCString()}\r\n                        </small>\r\n                     </p>\r\n                  );\r\n               })}\r\n            </div>\r\n            <div className=\"chat_input\">\r\n               <EmojiEmotionsIcon fontSize=\"large\" />\r\n               <form>\r\n                  <input\r\n                     type=\"text\"\r\n                     value={input}\r\n                     onChange={(event) => setInput(event.target.value)}\r\n                     placeholder=\"Type a message..\"\r\n                  />\r\n                  <IconButton\r\n                     disabled={!input}\r\n                     onClick={SendMessage}\r\n                     type=\"submit\"\r\n                  >\r\n                     <Send\r\n                        disabled={!input}\r\n                        fontSize=\"large\"\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                     />\r\n                  </IconButton>\r\n               </form>\r\n               <Mic />\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n};\r\n\r\nexport default Chat;\r\n","import { Button } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport \"./Login.css\";\r\n\r\nconst Login = () => {\r\n   const SignIn = () => {\r\n      auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n   };\r\n   return (\r\n      <div className=\"login\">\r\n         <div className=\"login_inner\">\r\n            <img\r\n               src=\"https://tse1.mm.bing.net/th?id=OIP.HT81DsS-pt0LE33O5F-_QwHaEK&pid=Api&P=0&w=290&h=164\"\r\n               alt=\"logo image\"\r\n            />\r\n            <h3>Sign in whatsapp</h3>\r\n            <Button onClick={SignIn}>Sign in with google</Button>\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default Login;\r\n","import { Avatar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./SidebarChat.css\";\r\nimport db from \"./firebase\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { selectRoomId, setRoomDetails } from \"../features/roomSlice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst SidebarChat = ({ addNewChat, id, content }) => {\r\n   const roomId = useSelector(selectRoomId);\r\n   const [message, setMessage] = useState([]);\r\n   const dispatch = useDispatch();\r\n   const SetRoom = () => {\r\n      if (id) {\r\n         dispatch(\r\n            setRoomDetails({\r\n               roomName: content,\r\n               roomId: id,\r\n            })\r\n         );\r\n      }\r\n   };\r\n\r\n   useEffect(() => {\r\n      db.collection(\"rooms\")\r\n         .doc(id)\r\n         .collection(\"messages\")\r\n         .orderBy(\"timestamp\", \"desc\")\r\n         .onSnapshot((snapshot) => {\r\n            setMessage(snapshot.docs.map((doc) => doc.data()));\r\n         });\r\n   }, []);\r\n\r\n   const AddNewChat = () => {\r\n      const chatName = prompt(\"Enter Room Name:\");\r\n      if (chatName) {\r\n         console.log(chatName);\r\n         db.collection(\"rooms\").add({\r\n            chatName: chatName,\r\n         });\r\n      }\r\n   };\r\n   return !addNewChat ? (\r\n      <div onClick={SetRoom} className=\"sidebarChat\">\r\n         <Avatar src={message[0]?.photoURL} />\r\n         <div className=\"sidebarChat_info\">\r\n            <h2>{content}</h2>\r\n            <p>{message[0]?.message}</p>\r\n         </div>\r\n      </div>\r\n   ) : (\r\n      <div onClick={AddNewChat} className=\"sidebarChat addNewChat\">\r\n         <h2>Add New Chat</h2>\r\n      </div>\r\n   );\r\n};\r\n\r\nexport default SidebarChat;\r\n","import { Avatar, IconButton } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport \"./Sidebar.css\";\r\nimport DataUsageIcon from \"@material-ui/icons/DataUsage\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport db from \"./firebase\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LogOut, selectUser } from \"../features/userSlice\";\r\n\r\nfunction Sidebar() {\r\n   const [Room, setRoom] = useState([]);\r\n   const user = useSelector(selectUser);\r\n   const dispatch = useDispatch();\r\n   useEffect(() => {\r\n      db.collection(\"rooms\").onSnapshot((snapshot) => {\r\n         setRoom(\r\n            snapshot.docs.map((doc) => ({\r\n               id: doc.id,\r\n               data: doc.data(),\r\n            }))\r\n         );\r\n      });\r\n   }, []);\r\n   const SignOut = () => {\r\n      if (user) {\r\n         dispatch(LogOut());\r\n      }\r\n   };\r\n   return (\r\n      <>\r\n         <div className=\"sidebar\">\r\n            <div className=\"sidebar_header\">\r\n               <Avatar onClick={SignOut} src={user.photoURL} />\r\n               <div className=\"sidebar_headerRight\">\r\n                  <IconButton>\r\n                     <DataUsageIcon />\r\n                  </IconButton>\r\n                  <IconButton>\r\n                     <MoreVertIcon />\r\n                  </IconButton>\r\n               </div>\r\n            </div>\r\n\r\n            <div className=\"sidebar_search\">\r\n               <Search />\r\n               <input placeholder=\"Search or start new chat\" />\r\n            </div>\r\n            <hr />\r\n\r\n            <div className=\"sidebarChat_body\">\r\n               <SidebarChat addNewChat />\r\n               {Room.map((data) => {\r\n                  return (\r\n                     <SidebarChat\r\n                        id={data.id}\r\n                        key={data.id}\r\n                        content={data.data.chatName}\r\n                     />\r\n                  );\r\n               })}\r\n            </div>\r\n         </div>\r\n      </>\r\n   );\r\n}\r\nexport default Sidebar;\r\n","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport Chat from \"./components/Chat\";\nimport { auth } from \"./components/firebase\";\nimport Login from \"./components/Login\";\nimport Sidebar from \"./components/Sidebar\";\nimport { LogIn, selectUser } from \"./features/userSlice\";\n\nfunction App() {\n   const dispatch = useDispatch();\n   const user = useSelector(selectUser);\n   console.log(user);\n   useEffect(() => {\n      auth.onAuthStateChanged((authUser) => {\n         dispatch(\n            LogIn({\n               displayName: authUser.displayName,\n               email: authUser.email,\n               photoURL: authUser.photoURL,\n            })\n         );\n      });\n   }, []);\n   return (\n      <>\n         {user ? (\n            <div className=\"app\">\n               <div className=\"app_body\">\n                  <Sidebar />\n                  <Chat />\n               </div>\n            </div>\n         ) : (\n            <Login />\n         )}\n      </>\n   );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userReducer from \"../features/userSlice\";\nimport roomReducer from \"../features/roomSlice\";\n\nexport const store = configureStore({\n   reducer: {\n      user: userReducer,\n      room: roomReducer,\n   },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}